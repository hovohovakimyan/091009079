2.1 Version control համակարգ է, որը ժամանակի ընթացքում գրանցում է ֆայլի կամ ֆայլերի մի շարք փոփոխություններ, որպեսզի հետագայում կարողանաք հետ կանչել որոշակի տարբերակներ:
 Այս գրքի օրինակների համար դուք կօգտագործեք ծրագրային ապահովման աղբյուրի կոդը, քանի որ ֆայլերը վերահսկվում են տարբերակով, թեև իրականում դուք կարող եք դա անել համակարգչի գրեթե ցանկացած տեսակի ֆայլի հետ:
Եթե ​​դուք գրաֆիկական կամ վեբ դիզայներ եք և ցանկանում եք պահպանել պատկերի կամ դասավորության յուրաքանչյուր տարբերակը: Տարբերակների վերահսկման համակարգը (VCS) շատ իմաստուն բան է օգտագործելու համար:
 Այն թույլ է տալիս վերադարձնել ընտրված ֆայլերը նախկին վիճակին, ամբողջ նախագիծը վերադարձնել նախկին վիճակին, համեմատել փոփոխությունները ժամանակի ընթացքում, տեսնել, թե ով է վերջին անգամ փոփոխել ինչ-որ բան, որը կարող է խնդիր առաջացնել, ով և երբ է ներկայացրել խնդիր և այլն:
 VCS-ի օգտագործումը նաև ընդհանուր առմամբ նշանակում է, որ եթե դուք ինչ-որ բան քանդեք կամ կորցնեք ֆայլերը, կարող եք հեշտությամբ վերականգնել:
 Բացի այդ, դուք ստանում եք այս ամենը շատ քիչ գումարի դիմաց:

2.2 Repositor պարունակում է ձեր նախագծի բոլոր ֆայլերը և յուրաքանչյուր ֆայլի վերանայման պատմությունը:
 Դուք կարող եք քննարկել և կառավարել ձեր նախագծի աշխատանքը repositor-ում:
Դուք կարող եք առանձին repositories ունենալ, կամ կարող եք repositories-ի սեփականությունը կիսել կազմակերպության այլ մարդկանց հետ:
Օգտատերերին պատկանող repositories-ի համար դուք կարող եք թույլ տալ այլ մարդկանց համահեղինակների հասանելիություն, որպեսզի նրանք կարողանան համագործակցել ձեր նախագծի վրա:
 Եթե ​​repositor-ը պատկանում է կազմակերպությանը, կարող եք կազմակերպության անդամներին թույլտվություն տալ՝ համագործակցելու ձեր repositor-ում: 

2.3 GitHub-ի օգտատերերը ստեղծում են հաշիվներ, վերբեռնում ֆայլեր և ստեղծում կոդավորման նախագծեր: Սակայն GitHub-ի իրական աշխատանքը տեղի է ունենում, երբ օգտվողները սկսում են համագործակցել:

Թեև յուրաքանչյուրը կարող է ինքնուրույն կոդավորել, մարդկանց թիմերը կառուցում են զարգացման նախագծերի մեծ մասը: Երբեմն այս թիմերը բոլորը միանգամից մեկ տեղում են, բայց ավելի հաճախ նրանք աշխատում են ասինխրոն: Բաշխված թիմերի հետ համատեղ նախագծեր ստեղծելու բազմաթիվ մարտահրավերներ կան: GitHub-ն այս գործընթացը շատ ավելի պարզ է դարձնում մի քանի տարբեր ձևերով:

Ինչ է GitHub հարթակի տունը

Նախ, բոլոր ծածկագրերը և փաստաթղթերը մեկ տեղում են: Սա սահմանափակում է մուտքի հետ կապված խնդիրները բոլորի համար, ովքեր ցանկանում են նպաստել նախագծին: Յուրաքանչյուր պահեստ պարունակում է նաև հրահանգներ և այլ մանրամասներ, որոնք կօգնեն նախանշել ծրագրի նպատակներն ու կանոնները:

Հաջորդը, կոդավորումն ավելի ստեղծագործ և վերացական է, քան ոչ տեխնիկական մարդկանց մեծամասնությունը կարծում է, որ դա է: Օրինակ, ասենք, որ երկու մշակողներ աշխատում են կոդերի տարբեր մասերի վրա: Կոդի այս երկու կտորները պետք է միասին աշխատեն: Բայց երբեմն կոդի մի կտորը կարող է ձախողել մյուս կոդը: Կամ կոդի մի հատվածը կարող է անսպասելի ազդեցություն ունենալ մյուս ծածկագրի աշխատանքի վրա:

GitHub-ը լուծում է այս խնդիրները՝ ցույց տալով, թե ինչպես են երկու ֆայլերը փոխելու հիմնական ճյուղը: Այն բռնում է այս սխալները նախքան փոփոխությունները մղելը, կոդավորման գործընթացը դարձնելով ավելի արդյունավետ:

GitHub-ը նաև հեշտացնում է փոփոխություններին հետևելը և նախագծի նախորդ տարբերակներին վերադառնալը: Սա բացատրելու համար մենք պետք է հասկանանք GitHub-ի տեխնոլոգիան, որի վրա հիմնված է Git-ը և խոսենք տարբերակների վերահսկման մասին:

2.4 GitHub ինտերնետային հոսթինգ ծառայություն է ծրագրային ապահովման մշակման և տարբերակների վերահսկման համար Git-ի միջոցով ։
 Այն ապահովում է Git-ի բաշխված տարբերակի վերահսկում , գումարած մուտքի վերահսկում , սխալների հետևում , ծրագրային ապահովման հնարավորությունների հարցումներ, առաջադրանքների կառավարում , շարունակական ինտեգրում և վիքիներ յուրաքանչյուր նախագծի համար:
 Գլխամասային գրասենյակը գտնվում է Կալիֆորնիայում այն եղել է դուստր ձեռնարկություն։
Այն սովորաբար օգտագործվում է բաց կոդով ծրագրային ապահովման մշակման նախագծեր հյուրընկալելու համար:
 2023 թվականի հունվարի դրությամբ GitHub-ը հաղորդում է, որ ունի ավելի քան 100 միլիոն developers և ավելի քան 372 միլիոն repositories ,ներառյալ առնվազն 28 միլիոն հանրային repositories։
Դա 2021 թվականի նոյեմբերի դրությամբ ամենամեծ աղբյուրի կոդն է :
